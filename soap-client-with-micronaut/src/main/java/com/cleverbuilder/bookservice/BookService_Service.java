package com.cleverbuilder.bookservice;

import java.net.URL;
import javax.xml.namespace.QName;

import edu.micronaut.recipes.soapclient.WsdlLocation;
import io.micronaut.context.annotation.Value;
import jakarta.inject.Singleton;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.5
 * 2024-10-14T09:28:07.513+02:00
 * Generated source version: 4.0.5
 *
 */
@Singleton
@WebServiceClient(name = "BookService",
                  wsdlLocation = "file:/Users/valeriu/IdeaProjects/micronaut-quarkus-recipes/soap-client-with-micronaut/src/main/resources/wsdl/BookService.wsdl",
                  targetNamespace = "http://www.cleverbuilder.com/BookService/")
public class BookService_Service extends Service {

    //public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://www.cleverbuilder.com/BookService/", "BookService");
    public static final QName BookServiceSOAP = new QName("http://www.cleverbuilder.com/BookService/", "BookServiceSOAP");

    //we don't need this, wsdl location URL needs to be injected by the DI container
    /*
    static {
        URL url = null;
        try {
            url = URI.create("file:/Users/valeriu/IdeaProjects/micronaut-quarkus-recipes/soap-client-with-micronaut/src/main/resources/wsdl/BookService.wsdl").toURL();
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(BookService_Service.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/Users/valeriu/IdeaProjects/micronaut-quarkus-recipes/soap-client-with-micronaut/src/main/resources/wsdl/BookService.wsdl");
        }
        WSDL_LOCATION = url;
    }
    */

    public BookService_Service(@WsdlLocation("BookService.wsdl") URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }


// we don't need those for the DI
/*
    public BookService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BookService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    public BookService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public BookService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public BookService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }
*/




    /**
     *
     * @return
     *     returns BookService
     */
    @WebEndpoint(name = "BookServiceSOAP")
    public BookService getBookServiceSOAP() {
        return super.getPort(BookServiceSOAP, BookService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BookService
     */
    @WebEndpoint(name = "BookServiceSOAP")
    public BookService getBookServiceSOAP(WebServiceFeature... features) {
        return super.getPort(BookServiceSOAP, BookService.class, features);
    }

}
