package xyz.tomd.customerservice;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import javax.xml.namespace.QName;

import edu.micronaut.recipes.soapclient.WsdlLocation;
import jakarta.inject.Singleton;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.5
 * 2024-10-14T09:28:07.236+02:00
 * Generated source version: 4.0.5
 *
 */
@Singleton
@WebServiceClient(name = "CustomerService",
                  wsdlLocation = "file:/Users/valeriu/IdeaProjects/micronaut-quarkus-recipes/soap-client-with-micronaut/src/main/resources/wsdl/CustomerService.wsdl",
                  targetNamespace = "http://customerservice.tomd.xyz/")
public class CustomerService_Service extends Service {

    //no need for it
    //public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://customerservice.tomd.xyz/", "CustomerService");
    public static final QName CustomerServiceSoap12HttpPort = new QName("http://customerservice.tomd.xyz/", "CustomerServiceSoap12HttpPort");
/*    static {
        URL url = null;
        try {
            url = URI.create("file:/Users/valeriu/IdeaProjects/micronaut-quarkus-recipes/soap-client-with-micronaut/src/main/resources/wsdl/CustomerService.wsdl").toURL();
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CustomerService_Service.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/Users/valeriu/IdeaProjects/micronaut-quarkus-recipes/soap-client-with-micronaut/src/main/resources/wsdl/CustomerService.wsdl");
        }
        WSDL_LOCATION = url;
    }*/

    public CustomerService_Service(@WsdlLocation("CustomerService.wsdl") URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

/*
    public CustomerService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CustomerService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    public CustomerService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CustomerService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }
    */


    /**
     *
     * @return
     *     returns CustomerService
     */
    @WebEndpoint(name = "CustomerServiceSoap12HttpPort")
    public CustomerService getCustomerServiceSoap12HttpPort() {
        return super.getPort(CustomerServiceSoap12HttpPort, CustomerService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CustomerService
     */
    @WebEndpoint(name = "CustomerServiceSoap12HttpPort")
    public CustomerService getCustomerServiceSoap12HttpPort(WebServiceFeature... features) {
        return super.getPort(CustomerServiceSoap12HttpPort, CustomerService.class, features);
    }

}
